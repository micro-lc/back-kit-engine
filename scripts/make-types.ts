import { existsSync, readFileSync } from 'fs'
import { writeFile } from 'fs/promises'
import { resolve } from 'path'

import type { Options } from 'json-schema-to-typescript'
import { compileFromFile } from 'json-schema-to-typescript'

const bannerComment = '/* eslint-disable */\n/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run `yarn make-types` to regenerate this file.\n*/'

const main = async () => {
  const schemaDirPath = resolve(__dirname, '../schemas')

  const inputFilePath = resolve(schemaDirPath, 'manifest.schema.json')
  const outputFilePath = resolve(schemaDirPath, 'index.d.ts')

  try {
    const compileProps: Partial<Options> = {
      $refOptions: {
        resolve: {
          http: {
            read({ url }) {
              const fileNameMatch = url.match(/schemas\/(.+)(#\/.*)?$/)

              if (fileNameMatch?.[1] !== undefined && existsSync(resolve(schemaDirPath, fileNameMatch[1]))) {
                return readFileSync(resolve(schemaDirPath, fileNameMatch[1]))
              }

              throw new TypeError(`Cannot find locally a file for ${url} $ref`)
            },
          },
        },
      },
      bannerComment,
      style: { semi: false },
    }

    const compiledTypes = await compileFromFile(inputFilePath, compileProps)

    await writeFile(outputFilePath, compiledTypes)

    console.log('\x1b[32m%s\x1b[0m', '✔ Schema compiled successfully')
  } catch (err) {
    console.log('\x1b[31m%s\x1b[0m', '✖ Failed compiling schema')
    console.error(err)
  }
}

main().catch(err => console.error(err))
